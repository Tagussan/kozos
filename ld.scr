OUTPUT_FORMAT("elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY("_entry_point")

MEMORY
{
	romall(rx)	: o = 0x00000000, l = 0x00100000 /* 1MB */
	romvector(r)	: o = 0x00000000, l = 0x00000100 /* top of ROM */
	rom(rx)		: o = 0x00000100, l = 0x000fff00

	ramall(rwx)	: o = 0x1fff0000, l = 0x00020000 /* 128KB */
	application(rw) : o = 0x1fff0000, l = 0x00004000 /* 16KB */
	data(rw)        : o = 0x1fff4000, l = 0x0000a000 /* 40KB */
	buffer(rw)      : o = 0x1fffe000, l = 0x00004000 /* 16KB */
	freearea(rw)    : o = 0x20002000, l = 0x0000c000 /* 48KB */
	stack(rw)	: o = 0x2000e000, l = 0x00002000 /* end of RAM */
}

SECTIONS
{
	.romvector : {
		_romvector_start = . ;
		*(.vector)
		. = ALIGN(4);
		_romvector_end = . ;
	} > romvector

	.text : {
		_text_start = . ;
		_entry_point = reset_entry + 1 ;
		*(.text)
		*(.text.startup)
		_etext = . ;
	} > rom

	.rodata : {
		_rodata_start = . ;
		*(.strings)
		*(.rodata)
		*(.rodata.*)
		. = ALIGN(4);
		_erodata = . ;
	} > rom

	_data_org = . ;
	.data : {
		_data_start = . ;
		*(.data)
		. = ALIGN(4);
		_data_end = . ;
		_edata = . ;
	} > data AT> rom

	.bss : {
		_bss_start = . ;
		*(.bss)
		*(COMMON)
		. = ALIGN(4);
		_bss_end = . ;
		_ebss = . ;
	} > data AT> rom

	. = ALIGN(4);
	_end = . ;

	.buffer : {
		_buffer_start = . ;
		buffer_start = . ;
	} > buffer

	.freearea : {
		_freearea = . ;
		freearea = . ;
	} > freearea

	.stack : {
		_main_stack = . + 0x2000 ;
	} > stack
}
